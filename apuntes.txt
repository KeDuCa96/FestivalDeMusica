1. Para instalar sass, debemos isntarla node js desde su pagina web https://nodejs.org/es/ y seleccionamos la opción de recomendado para todos. Al momento de instalarlo es muy importante incluir el chocolatey nos ayudará mucho en el proyecto y para comprobar que todo quedó bien instalado podemos activar los siguientes comandos; node -v, npm -v, chocolatey -v, si estos tres comandos no nos arrojan problema queire decir que todo esta ok. 

2. instalamos sass, desde la terminal de VSC podemos instalar las dependecias necesarias, en este caso la de SASS así; npm install sass--save-dev ( de esta forma la instalamos de forma de desarrollador), luego en el package.json podemos modificar el scripts que será el que nos compile y queda así: "sass" :  "sass --watch src/scss:build/css" ("nombre del script" : "nombre del archivo + --watch(para que escuche los cambios sin estar compilando a cada rato ) + localización: la carpeta que queremos crear + el tipo de archivo a crear ) y para ejecutarlo sería con npm run sass ( sería npm run + el nombre que le demos al script) para saber si esto sirve nos debió crear la carpeta build y por último en link del HTML llamamos al archivo que nos creó en la carpeta build que será el .css

3. instalmos gulp desde el power shell ejecutandolo como administrador y el comando npm i -g gulp ( el -g lo instala globalmente), en la terminal del VSC instalamos gulp de forma local con; npm i --save-dev gulp y creamo un archivo llamado gulpfile.js

4. instalamos gulp-sass con el comando npm i --save-dev gulp-sass. Cuando nos da vulnerabilidades a las dependencias de desarrollador no nos afecta porque no es algo que vayamos a publicar. 

5. sass identifica su archivo principal aquel que no tenga un guión bajo al inicio de su nombre, muy importante eso.

6. hay dos sintaxis para usas sass, la primera es usando el @import y la nueva es usando el @forwar , para usar el forwar es necesario usar crear un archivo llamado _index.scss en ambas carpetas base y contenido.
@forwar solo indica donde estan los archivos y solo va en el archivo index
@use los compila en contenido   

7. los mixins son piezas de cogido de css que  se puede reutilizar en las hojas de estilo y pueden contener muchas o pocas lineas de codigo de css, se le pueden pasar argumentos, se puede reutilizar como una función de JS.
Todo lo que empieza con @ son propiedad de sass mas conoidas como directivas.
Se aconseja usarlos para pedazos de códigos que se repiten mucho como los mediaquery


8. //Esta es la forma de declarar un snippet
 	"media query":{   //tipo de snippet
		"prefix": "mq",     //el prefijo o como querramos llamarlo (solo usamos )
		"body": [
			"@include m.$1 {\n\t$2\n}" //$1, $2, $3, etc. Son las posiciones que queremos que se use cuando demos un tap. \t es para tab y caer en el primer cursos creado ($1), \n es para dar un salto de línea, con \" hacemos que no nos identifique la doble comilla para el json sino para el html u otro código que necesitemos la doble comilla
		]
	}

9. Debemos tener 3 formatos de vídeo diferentes, mp4, ogg y webm porque no todos los navegadores soportan todas los tipos.

10. Importante saber que node 12+ no es compatible con gulpe 3-.

11.     //Cargamos primero la imagen avif porque es la que menos soporte tiene hasta el momento
		//*En caso tal el navegador no soprta avif pasa a usar jpg, lo importante es que es un jpg con poco peso